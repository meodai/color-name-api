/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: {
                /** @description The name of the color name list to use (case-insensitive) */
                list?: components["schemas"]["possibleLists"];
                /** @description A comma-separated list of hex values (e.g., `FF0000,00FF00` do not include the `#`) */
                values?: string;
                /** @description Allow duplicate names or not */
                noduplicates?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all colors of the default color name list
         * @description Returns an array of colors from the specified list, with distance calculations
         *     to show how close each match is to the requested colors. When providing multiple
         *     values, the endpoint will find the closest match for each color.
         *
         */
        get: {
            parameters: {
                query?: {
                    /** @description The name of the color name list to use (case-insensitive) */
                    list?: components["schemas"]["possibleLists"];
                    /** @description A comma-separated list of hex values (e.g., `FF0000,00FF00` do not include the `#`) */
                    values?: string;
                    /** @description Allow duplicate names or not */
                    noduplicates?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            colors?: components["schemas"]["color"][];
                            paletteTitle?: string;
                        };
                    };
                };
                /** @description NOT FOUND */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/names/": {
        parameters: {
            query: {
                /** @description The name of the color to retrieve (min 3 characters) */
                name: string;
                /** @description The name of the color name list to use */
                list?: components["schemas"]["possibleLists"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all colors of the default color name list */
        get: {
            parameters: {
                query: {
                    /** @description The name of the color to retrieve (min 3 characters) */
                    name: string;
                    /** @description The name of the color name list to use */
                    list?: components["schemas"]["possibleLists"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            colors?: components["schemas"]["colorBasic"][];
                        };
                    };
                };
                /** @description NOT FOUND */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all colors of the default color name list
         * @description Returns a list of available color name lists with descriptions and URLs to
         *     the color list endpoints.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            availableColorNameLists?: string[];
                            listDescriptions?: {
                                default?: components["schemas"]["listDescription"];
                                bestOf?: components["schemas"]["listDescription"];
                                wikipedia?: components["schemas"]["listDescription"];
                                french?: components["schemas"]["listDescription"];
                                spanish?: components["schemas"]["listDescription"];
                                german?: components["schemas"]["listDescription"];
                                ridgway?: components["schemas"]["listDescription"];
                                risograph?: components["schemas"]["listDescription"];
                                basic?: components["schemas"]["listDescription"];
                                chineseTraditional?: components["schemas"]["listDescription"];
                                html?: components["schemas"]["listDescription"];
                                japaneseTraditional?: components["schemas"]["listDescription"];
                                leCorbusier?: components["schemas"]["listDescription"];
                                nbsIscc?: components["schemas"]["listDescription"];
                                ntc?: components["schemas"]["listDescription"];
                                osxcrayons?: components["schemas"]["listDescription"];
                                ral?: components["schemas"]["listDescription"];
                                sanzoWadaI?: components["schemas"]["listDescription"];
                                thesaurus?: components["schemas"]["listDescription"];
                                werner?: components["schemas"]["listDescription"];
                                windows?: components["schemas"]["listDescription"];
                                x11?: components["schemas"]["listDescription"];
                                xkcd?: components["schemas"]["listDescription"];
                            };
                        };
                    };
                };
                /** @description NOT FOUND */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/swatch/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Generate a color swatch for any color
         * @description Generates an SVG swatch representation of a color. The swatch can include
         *     the color name if provided. The SVG is designed to be visually appealing
         *     and readable across different backgrounds.
         *
         */
        get: {
            parameters: {
                query: {
                    /** @description The hex value of the color to retrieve without '#' */
                    color: string;
                    /** @description The name of the color */
                    name?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "image/svg+xml": string;
                    };
                };
                /** @description NOT FOUND */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        listDescription: {
            /** @description The title of the color name list */
            title?: string;
            /** @description A description of the color name list */
            description?: string;
            /** @description API endpoint to get the colors of the list */
            url?: string;
            /** @description URL to the source of the color name list */
            source?: string;
            /** @description Reference key of the color name list in the API */
            key?: string;
            /** @description License of the given color name list */
            license?: string;
            /** @description Amount of colors in the list */
            colorCount?: number;
        };
        colorBasic: {
            /** @description Name of the closest color relative to the hex value provided */
            name: string;
            /** @description Hex value of the color (can differ from the requested hex value) */
            hex: string;
            /** @description RGB values */
            rgb: {
                r: number;
                g: number;
                b: number;
            };
            /** @description HSL values. All percentages are represented as integers (e.g., 50% as `50`). */
            hsl: {
                h: number;
                s: number;
                l: number;
            };
            /** @description LAB values */
            lab: {
                l: number;
                a: number;
                b: number;
            };
            /** @description Luminance value */
            luminance: number;
            /** @description Luminance value according to WCAG */
            luminanceWCAG: number;
            /** @description SVG representation of the color */
            swatchImg: {
                /**
                 * Format: svg
                 * @description SVG representation of the color with the name
                 */
                svgNamed: string;
                /**
                 * Format: svg
                 * @description SVG representation of the color without the name
                 */
                svg: string;
            };
        };
        color: {
            /** @description The hex value that was requested by the user */
            requestedHex?: string;
            /** @description The distance between the requested hex value and the closest color (0 = exact match) */
            distance?: number;
        } & (components["schemas"]["colorBasic"] & Record<string, never> & unknown);
        /**
         * @description Predefined color lists. Names are case-sensitive.
         * @enum {string}
         */
        possibleLists: "default" | "bestOf" | "short" | "wikipedia" | "french" | "spanish" | "german" | "ridgway" | "risograph" | "basic" | "chineseTraditional" | "html" | "japaneseTraditional" | "leCorbusier" | "nbsIscc" | "ntc" | "osxcrayons" | "ral" | "sanzoWadaI" | "thesaurus" | "werner" | "windows" | "x11" | "xkcd";
        socketColorResponse: {
            paletteTitle?: string;
            list?: components["schemas"]["possibleLists"];
            colors?: components["schemas"]["colorBasic"][];
        };
        /** @example {
         *       "status": 404,
         *       "message": "Not Found"
         *     } */
        error: {
            status?: number;
            message?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
